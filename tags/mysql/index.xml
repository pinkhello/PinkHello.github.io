<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mysql on pinkhello</title><link>https://pinkhello.cc/tags/mysql/</link><description>Recent content in mysql on pinkhello</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>pinkhello</copyright><lastBuildDate>Thu, 02 Dec 2021 11:06:28 +0800</lastBuildDate><atom:link href="https://pinkhello.cc/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>MVCC在不同的数据库之中的应用</title><link>https://pinkhello.cc/posts/40-mvcc%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</link><pubDate>Thu, 02 Dec 2021 11:06:28 +0800</pubDate><guid>https://pinkhello.cc/posts/40-mvcc%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</guid><description>MVCC 高并发情况, 应对数据冲突问题，一般两种方式:
见招拆招，避免冲突，使用 悲观锁 确保同时刻只能一个线程对数据进行修改。（Read/Write Locks、Two-Phase Locking) 开门迎客，允许冲突，但发生冲突的时候，要有能力检测到。（乐观锁）先认为不会发生冲突、除非检测到当前确实冲突了。（Logical Clock、MVCC ： Multi-Version Concurrent Control ） MVCC
核心思想: 一个数据多个历史版本，从而解决事务管理中数据隔离的问题。
版本 &amp;mdash;&amp;gt; 一般选择时间戳 或者 事务ID 标识
在处理写请求的时候， MVCC 是为数据添加一个新版本的数据；在读取数据的时候，先确定读取的版本，根据版本找到对应的数据。
https://dbdb.io/browse?concurrency-control=multi-version-concurrency-control-mvcc&amp;amp;q=
MYSQL中 MVCC innodb-multi-versioning
InnoDB 内部为每一行记录添加 三个隐藏的列，
DB_TRX_ID 创建记录/最后更新记录的事务ID,(删除也被视作更新，设置行的特殊位标记位删除) DB_ROLL_PTR 回滚指针，执行这条记录的上一个版本(rollback segment ： undo log，记录了更新前重建该记录的所需的信息) DB_ROW_ID 隐藏自增ID, 如果没有主键，就会以DB_ROW_ID 产生聚簇索引，随着插入新行，自增的， rollback segment 分为两种
inert undo log ，仅在事务回滚的时候需要，事务提交后立即丢弃 update undo log ，用于一致性读取，只有在 没有事务存在，且 头信息里面还有一个 delete_flag (bit) 标记为该记录是否删除
[待丰富]&amp;hellip;..
ETCD 中 MVCC mvcc
ETCD 使用 revision 作为一条记录的版本，revision 对于 etcd 的集群来说就像 逻辑时钟，每个数据发生更改做更新。</description></item></channel></rss>
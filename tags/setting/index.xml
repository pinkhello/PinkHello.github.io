<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>setting on pinkhello</title><link>https://pinkhello.cc/tags/setting/</link><description>Recent content in setting on pinkhello</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>pinkhello</copyright><lastBuildDate>Fri, 27 Aug 2021 17:58:15 +0800</lastBuildDate><atom:link href="https://pinkhello.cc/tags/setting/index.xml" rel="self" type="application/rss+xml"/><item><title>Aws上mongo备份进入S3</title><link>https://pinkhello.cc/posts/34-aws%E4%B8%8Amongo%E5%A4%87%E4%BB%BD%E8%BF%9B%E5%85%A5s3/</link><pubDate>Fri, 27 Aug 2021 17:58:15 +0800</pubDate><guid>https://pinkhello.cc/posts/34-aws%E4%B8%8Amongo%E5%A4%87%E4%BB%BD%E8%BF%9B%E5%85%A5s3/</guid><description>机器准备 开启新机器, 注意需要备份的数据量。选择磁盘或者数据盘大小 老机器上, 磁盘在线需要扩容的话注意执行扩容，让设备分区和文件系统都识别 云台上选择需要扩容的磁盘扩大到需要的大小（当前机器上还无法直接使用）
进入机器控制台
# lsblk 查看磁盘大小 # lsblk -f 查看磁盘大小以及类型 # df -lh # lsblk # sudo growpart 磁盘设备名称 1 # sudo resize2fs 磁盘文件系统 # df -lh df -lh lsblk lsblk -f sudo growpart /dev/nvme0n1 1 sudo resize2fs /dev/nvme0n1p1 备份脚本准备 backup.sh 备份脚本 #!/bin/bash # 公共 function 日志日期格式 get_date () { date +[%Y-%m-%d\ %H:%M:%S] } ARCHIVE_OUT=$BACKUP_FILENAME_PREFIX-$(date +$BACKUP_FILENAME_DATE_FORMAT).tgz echo &amp;#34;ARCHIVE_OUT=$ARCHIVE_OUT&amp;#34; # 生成POST请求数据 generate_post_data () { cat &amp;lt;&amp;lt;EOF { &amp;#34;group&amp;#34;:&amp;#34;alert-XXX&amp;#34;, &amp;#34;project&amp;#34;:&amp;#34;$S3_PATH$ARCHIVE_OUT&amp;#34;, &amp;#34;alert_message&amp;#34;:&amp;#34;备份mongo2s3错误&amp;#34; } EOF } # Script echo &amp;#34;$(get_date) Mongo backup started&amp;#34; echo &amp;#34;$(get_date) [Step 1/4] Running mongodump: mongodump --forceTableScan -h $MONGO_HOST $MONGO_DB_ARG -u $MONGO_USERNAME -p $MONGO_PASSWORD --authenticationDatabase admin&amp;#34; # mongodump --quiet -h $MONGO_HOST:$MONGO_PORT $MONGO_DB_ARG -u $MONGO_USERNAME -p $MONGO_PASSWORD --authenticationDatabase admin mongodump --forceTableScan -h $MONGO_HOST $MONGO_DB_ARG -u $MONGO_USERNAME -p $MONGO_PASSWORD --authenticationDatabase admin echo &amp;#34;$(get_date) [Step 2/4] check dump directory: curl feishu .</description></item><item><title>多域名下的SSH</title><link>https://pinkhello.cc/posts/10-%E5%A4%9A%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84ssh/</link><pubDate>Fri, 02 Apr 2021 08:00:00 +0800</pubDate><guid>https://pinkhello.cc/posts/10-%E5%A4%9A%E5%9F%9F%E5%90%8D%E4%B8%8B%E7%9A%84ssh/</guid><description>前言 有时候我们，有多个 git 账号（Gitlab、GitHub），这时候如果是同一个账号（邮箱注册），那不会有问题，但是如果不是相同的账号呢，我们在使用 SSH KEY 做免密登录时候，头痛了。
这个时候我们需要针对不同的账号，生成不同的 SSH Key，并且配置不同的域名使用不同的Key
生成一个 SSH KEY ssh-keygen -t rsa -C &amp;#34;username@email.com&amp;#34; 一路 Enter，并且在生成时候指定名字，（不指定名字会使用默认的）得到
id_rsa # 私钥 id_rsa.pub # 公钥 重复上一个步骤，生成多个 私钥和公钥 github_id_rsa github_id_rsa.pub gitlab_id_rsa gitlab_id_rsa.pub 配置相应的域名对应的 SSH-KEY 本地目录 ~/.ssh/ 下，查阅有没有 config 文件, 不存在就新建 config 文件 Host github HostName github.com User UserName PreferredAuthentications publickey IdentityFile ~/.ssh/github_id_rsa Host gitlab HostName gitlab.com User UserName PreferredAuthentications publickey IdentityFile ~/.ssh/gitlab_id_rsa 将密钥添加进入 SSH-AGENT 中 ssh-add ~/.ssh/github_id_rsa ssh-add ~/.ssh/gitlab_id_rsa 查看密钥</description></item><item><title>使用githook统一codestyle</title><link>https://pinkhello.cc/posts/09-%E4%BD%BF%E7%94%A8githook%E7%BB%9F%E4%B8%80codestyle/</link><pubDate>Tue, 30 Mar 2021 08:00:00 +0800</pubDate><guid>https://pinkhello.cc/posts/09-%E4%BD%BF%E7%94%A8githook%E7%BB%9F%E4%B8%80codestyle/</guid><description>gradle 优化 build 指定 -g cache 缓存 checkstyle 实践 基础镜像包含 checkstyle.xml 或者 放到远程其他可被拉取到的存储介质 ，防止项目成员改动 gitlab-ci beforeScript 标签执行命令 copy /checkstyle.xml 进入项目，(覆盖项目中存在的). gradle 编译的话 将 maven-publish.gradle repos.gradle checkstyle.gradle(checkstyle 插件配置 版本以及 configFile) 抽出放到公共的地方，防止项目团队成员改的. maven 的话，可以在公共的顶级继承 pom 里面指定变量checkstyle.config.location. mvn checkstyle -Dcheckstyle.config.location=checkstyle.xml git hook 实践 每个项目里面 .git/hooks 里面有很多的 hook 模板
客户端钩子包括:pre-commit、prepare-commit-msg、commit-msg、post-commit等，主要用于控制客户端git的提交工作流。
服务端钩子：pre-receive、post-receive、update，主要在服务端接收提交对象时、推送到服务器之前调用。
今天实践的是 客户端钩子，优化减少不符合规范或者低质量代码进入 gitflow 流程.
pre-commit 和 commit-msg 是今天的主角，pre-commit 执行与 git add 之后，在进行 git commit 之前进行的操作. 可以用来进行 code check code lint 等等, commit-msg 执行与 git commit 常用于补全 git commit message check msg 等等 当然还有其他骚操作的功能，可以通知，等等，做多种自动化</description></item><item><title>Gradle多模块项目模板化</title><link>https://pinkhello.cc/posts/08-gradle%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF%E5%8C%96/</link><pubDate>Mon, 29 Mar 2021 08:00:00 +0800</pubDate><guid>https://pinkhello.cc/posts/08-gradle%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF%E5%8C%96/</guid><description>前言 Maven 冗余， Gradle 简单轻便 公司原有的 CI/CD 流程，借助 Maven 插件 build Docker Image,改为原生 Docker Runner 原始构建
1、多模块项目 project - app - src/main/[java|resources] | src/test/[java|resources] # classpath - Dockerfile # Dockerfile - build.gradle # APP 模块 gradle 配置 - sdk # SDK 模块 可有可无 - src/main/java - build.gradle # SDK 的 gradle 配置 - deploy # delpoy 项目 注意 checkstyle 相关配置在这里面 - checkstyle/** - **.yml - build.gradle # 项目顶级 gradle配置 - gradle - wrapper/** # gradle 配置信息 - check.</description></item><item><title>Fabric使用</title><link>https://pinkhello.cc/posts/07-fabric%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 28 Mar 2021 08:00:00 +0800</pubDate><guid>https://pinkhello.cc/posts/07-fabric%E4%BD%BF%E7%94%A8/</guid><description>docker 加入systemctl环境并启动docker 快速安装docker
curl -sSL https://get.daocloud.io/docker | sh systemctl enable docker systemctl start docker docker-compose 安装 走外网或者 github 太慢,可以使用内部加速
curl -L &amp;#34;https://github.com/docker/compose/releases/download/X.XX.X/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose curl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose fabric 自动运维 python 虚拟环境安装 参考
创建一个独立的虚拟环境
cd 目标目录 virtualenv --no-site-packages venv 激活虚拟环境
source venv/bin/activate python pip 安装 Fabric pip install fabric3 python pip 导出依赖 pip freeze &amp;gt; requirements.txt 其他python pip 导入安装 pip install -r requirements.txt Fabric 文档 fabfiles 文档 # encoding=utf-8 from fabric.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on pinkhello</title><link>https://pinkhello.cc/tags/java/</link><description>Recent content in java on pinkhello</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>pinkhello</copyright><lastBuildDate>Wed, 04 May 2022 01:17:28 +0800</lastBuildDate><atom:link href="https://pinkhello.cc/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>JVM内存结构JMM</title><link>https://pinkhello.cc/posts/55-jvm%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84jmm/</link><pubDate>Wed, 04 May 2022 01:17:28 +0800</pubDate><guid>https://pinkhello.cc/posts/55-jvm%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84jmm/</guid><description>JVM 内存模型 从JVM的官方文档上可以看见，JVM的内存结构主要包含三块: 堆内存、方法区、栈
堆中又分 新生代 和 老年代, 新生代包含 Eden空间、From Survivor空间、To Survivor空间，也是线程共享的区域
方法区（非堆区）存储的 类信息、常量、静态变量等数据，是线程共享的区域，
栈 分为 本地方法栈 和 JVM虚拟机栈，还有个程序计数器 这三个都是线程私有的
Java Heap Java Heap 是 JVM 虚拟机管理的内存最大的一块，Java Heap 被所有的线程共享的内存区域，几乎所有的对象都在这里分配，也是 GC 管理的主要区域 Java Heap 是在物理上不连续的内存空间，只要逻辑上连续即可。
Method Area Method Area（非堆） 和 Java Heap 一样，是🧍各个线程共享的内存区域，用于存储已经被虚拟机加载的 类信息、常量、静态变量、即使编译器编译的代码等等
Program Counter Register Program Counter Register 程序计数器，较小的内存空间，是当前线程锁执行的字节码的行号指示器（唯一一个没有OOM的区域）
JVM Stacks JVM Stacks 也是线程私有的，它的生命周期和线程相同，虚拟机栈描述的 Java 方法执行的内存模型： 创建栈帧 Stack frame 用于存储 局部变量表、操作栈、动态链接、方法出口 等信息 每次方法被调用直至完成，都对应着一个栈帧在虚拟机栈中的入栈和出栈过程。
JVM 两种异常：
线程请求栈深度大于虚拟机允许的深度 StackOverflowError
JVM栈一般动态扩展的，如果无法申请足够的内存，会抛 OutOfMemoryError</description></item><item><title>JVM类加载机制</title><link>https://pinkhello.cc/posts/52-jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</link><pubDate>Tue, 03 May 2022 17:30:49 +0800</pubDate><guid>https://pinkhello.cc/posts/52-jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</guid><description>类加载系统 JVM核心的结构里面有一个就是 类加载系统。 一个java代码经过编译器后变成class字节码文件，后续在运行时，字节码需要通过JVM的类加载系统执行运行。
类加载系统
类的加载过程 类的生命周期 类加载器种类 类加载机制 类生命周期 类的生命周期包括: 加载、链接（验证、准备、解析）、初始化、使用和卸载，
加载
通过类全限定名来获取二进制字节流、 字节流描述的静态存储结构转换为方法区的运行时数据结构 在Heap中生成一个代表这个类的Class对象，作为方法区访问这些数据的入口 链接
验证 确保被加载的类的正确性
文件格式验证，字节流是否符合Class文件格式，如0xCAFFBABE开头、版本号、常量类型等等 元数据验证, 多字节码描述性信息进行语义分析、确保符合规范 字节码验证 符号引用验证 准备 为类的 静态变量 分配内存，并将其初始化成默认值
解析 把类中的符号引用转换为直接引用(直接指向目标的指针、相对偏移量或间接定位到目标的句柄), 主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄、调用点限定符等符号引用进行。
类加载过程 加载、链接（验证、准备、解析）、初始化 属于 类加载的过程
类加载过程从上图可看见
第一个阶段 Loading 通过类的全限定名获取到该类的class二进制字节码流数据，将二进制流数据代表的静态存储结构转换成方法区运行时的数据结构
第二个阶段 Linking 验证 Verify: 保证class文件字节流是符合JVM的要求，确保安全 准备 Prepare: 为静态字段分配内存并设置初始化默认值（被final修饰的static字段不会设置，在编译阶段就分配了） 解析 Resolve: 解析是为了将常量迟的符号引用转换为直接引用(实际引用)，如果符号引用指向未被加载的类，或未被加载的类的字段或方法，那么解析触发了这个类的加载（但是不一定触发这个类的Linking和Initialization） 第三个阶段 Initialization 初始化阶段是执行类的构造方法，init() 的过程,(编译器自动收集类的所有变量赋值动作和静态代码块语句合并的） 若该类有父类,JVM保证父类先执行init然后执行子类的init
类加载器的分类 上面描述了类加载的机制，那么用于类加载的组件我们叫类加载器，而且类加载器是有分类的
Bootstrap ClassLoader 启动类加载器，是JVM内部实现的，Java语言程序无法直接操作，主要用来加载Java核心类库，诸如rt.jar、resources.jar、sun.boot.class.path目录下的包，用于JVM运行所需的包（一般只加载 包名为java、javax、sun开头的类）
它加载Extension ClassLoader和Application ClassLoader，并成为它们的父类加载器
Extension ClassLoader 扩展类加载器(sun.misc.Launcher$ExtClassLoader实现), 派生继承 java.lang.ClassLoader, 父类加载器是 启动类加载器, 加载 lib/ext 目录下的加载类库。可以将自己的包放到该目录下，就会自动加载进入</description></item><item><title>Java内存泄漏的方式</title><link>https://pinkhello.cc/posts/53-java%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E6%96%B9%E5%BC%8F/</link><pubDate>Tue, 03 May 2022 01:10:31 +0800</pubDate><guid>https://pinkhello.cc/posts/53-java%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E6%96%B9%E5%BC%8F/</guid><description>Java 会有内存泄漏么？ 我们都知道 Java 是自动管理内存的，且核心的就是GC机制，即然提出这个问题，那就是肯定是存在内存泄漏的问题的。只不过是以哪种方式而已
♻️ 判断一个对象可以被回收 我们都说内存被占用，是Java的对象的占用的，那么JVM判断一个对象是否可以被回收，一般两种方式:
引用计数： 每一个对象都有引用计数的属性，新增一个引用计数+1，引用释放计数-1，计数为0可以回收 可达性分析：从GC Roots开始搜索，搜索引用链路是否能到达GC Roots，如果没有任何引用链路相连时候，该对象就可不可用，JVM就判断为可回收对象, 这种可以解决循环引用问题 GC Roots对象有哪些:
虚拟机栈中引用的对象 方法区中静态属性引用的对象 方法区中常量引用的对象 本地方法栈中JNI引用的对象 因为，引用计数的方法简单，但是存在一个致命的缺陷，假设对象A引用对象B，对象B又引用对象A，双方的引用计数都为1，假如程序上确实没有使用这两个对象慢但是JVM却无法对他们进行回收。也就是对象的循环引用问题。 但是可达性分析的方式，从GC ROOTS开始搜索，找寻是否可达对象，不可达的进行回收，解决了循环引用的问题。
所以市面上大部分主流的虚拟机都使用可达性分析 来判定对象是否被GC回收
JAVA 体系 内存问题有几种 内存溢出 OOM (out of memory), 申请分配内存时候，没有足够的可用空间出现OOM 内存泄漏 (memory leak), 已经申请分配的内存, 无法释放已经申请老的内存空间, 且一直在申请分配，但一直存在内存泄漏，内存泄漏堆积后，导致的无内存可以。 内存泄漏会导致OOM，但是OOM不完全因为内存泄漏。也可能是太多的大对象导致的。
如何分析内存泄漏问题 我们都知道内存泄漏是因为对象太多或者因为内存申请了但是无法释放导致的，所以针对内存泄漏的分析，一般也是围绕内存的对象的申请、释放等动作，对内存管理的信息进行统计、分析、可视化操作，根据这些信息进行判断释放有内存泄漏问题
工具主要有
JvisualVM JProfile Arthas Xpocket &amp;hellip;</description></item><item><title>String为什么设计成final</title><link>https://pinkhello.cc/posts/03-string%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AE%BE%E8%AE%A1%E6%88%90final/</link><pubDate>Tue, 12 Feb 2019 10:00:00 +0800</pubDate><guid>https://pinkhello.cc/posts/03-string%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AE%BE%E8%AE%A1%E6%88%90final/</guid><description>String源码剖析 public final class String implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence { /** The value is used for character storage. */ private final char value[]; /** Cache the hash code for the string */ private int hash; // Default to 0 /** use serialVersionUID from JDK 1.0.2 for interoperability */ private static final long serialVersionUID = -6849794470754667710L; /** * Class String is special cased within the Serialization Stream Protocol. * * A String instance is written into an ObjectOutputStream according to * &amp;lt;a href=&amp;#34;{@docRoot}/.</description></item><item><title>关于final的思考</title><link>https://pinkhello.cc/posts/02-%E5%85%B3%E4%BA%8Efinal%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Mon, 11 Feb 2019 10:00:00 +0800</pubDate><guid>https://pinkhello.cc/posts/02-%E5%85%B3%E4%BA%8Efinal%E7%9A%84%E6%80%9D%E8%80%83/</guid><description>关于final的思考 final 是声明数据域最终的,不可以修改的，常见的 是类的 序列化ID String 类，其数据域都是 final 的 修改 final 修饰的属性 反射修改 final 修饰的数据域【非常成功的修改了】
public class Test { private final String name = &amp;#34;hello world&amp;#34;; public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException { Test test = new Test(); Field field = test.getClass().getDeclaredField(&amp;#34;name&amp;#34;); field.setAccessible(true); field.set(test,&amp;#34;HELLO, WORLD!&amp;#34;); System.out.println(field.get(test)); System.out.println(test.name); } } 输出 Hello, WORLD! hello world 第一个输出是因为说明运行成功，修改final修饰的对象的属性成功修改；
但是第二个输出，表明了我直接使用 name 的属性却还是输出端额原来的值.
反编译后的代码
public class Test { private final String name = &amp;#34;hello world&amp;#34;; public Test() { } public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException { Test test = new Test(); Field field = test.</description></item><item><title>Threadlocal 魔法</title><link>https://pinkhello.cc/posts/00-threadlocal-%E9%AD%94%E6%B3%95/</link><pubDate>Sat, 09 Feb 2019 10:00:00 +0800</pubDate><guid>https://pinkhello.cc/posts/00-threadlocal-%E9%AD%94%E6%B3%95/</guid><description>ThreadLocal 详解 前言 对于 ThreadLocal 的使用，并不难，这次主要讲述 ThreadLocal 的实现方式以及原理
ThreadLocal 是什么 ThreadLocal 为解决多线程并发问题提供的一种新的思路。
当使用 ThreadLocal 维护变量的时候，ThreadLocal 为每个使用该变量的线程提供独立的变量副本，所以每个线程都可以独立修改自己的副本，而不会修改到其他人的变量副本。
从线程角度看，Local 即本地意思，目标变量就像是线程的本地变量。
原理 ThreadLocal 是连接 Thread 与 ThreadLocalMap 粘合剂，是用来处理 Thread 的 ThreadLocalMap 属性， 包括 initialValue() 变量，set 对应的变量，get 对应的变量。
ThreadLocalMap 用来存储数据，采用类似HashMap的机制，存储了以ThreadLocal为Key，目标数据为Value的Entry键值对数组结构。
Thread 有个 ThreadLocalMap 的属性，存储的数据存放在此处。
Thread、ThreadLocal、 ThreadLocalMap的关系 ThreadLocalMap 是 ThreadLocal 的内部类，有 ThreadLocal创建，Thread有 ThreadLocal.ThreadLocalMap 类型的属性，源码如下
Thread public class Thread implements Runnable { /* * ThreadLocal values pertaining to this thread. This map is maintained * by the ThreadLocal class.</description></item></channel></rss>
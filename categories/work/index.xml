<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>work on pinkhello</title><link>https://pinkhello.cc/categories/work/</link><description>Recent content in work on pinkhello</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>pinkhello</copyright><lastBuildDate>Sat, 20 Aug 2022 14:38:10 +0800</lastBuildDate><atom:link href="https://pinkhello.cc/categories/work/index.xml" rel="self" type="application/rss+xml"/><item><title>关于团队的思考</title><link>https://pinkhello.cc/posts/59-%E5%85%B3%E4%BA%8E%E5%9B%A2%E9%98%9F%E7%9A%84%E6%80%9D%E8%80%83/</link><pubDate>Sat, 20 Aug 2022 14:38:10 +0800</pubDate><guid>https://pinkhello.cc/posts/59-%E5%85%B3%E4%BA%8E%E5%9B%A2%E9%98%9F%E7%9A%84%E6%80%9D%E8%80%83/</guid><description>团队本质 团队或公司是一个商业性的团体 诉求: 用户的增长、持续的盈利 以技术或产品角度思考：产品或服务 -&amp;gt; 获客 -&amp;gt; 盈利。 团队特性 团队是一直在变化的，一个稳定的组织要么垄断，要么死亡 团队下所有人会分化成不同的类型, 不是所有人都能跟上组织的发展、也不是所有人都有相同的工作能力或管理能力 不要过于在意你在团队中的角色、要多去想你要做到什么程度，为此你要付出什么样的努力或代价 团队的向上通道要永远打开、不能让其变成一潭死水 尊重团队每个人的意愿，有的人专注技术对管理毫无兴趣、有人喜欢总览进度而且还能让所有人都服气&amp;hellip; 选择有职业操守与共同利益的人成为你的团队成员 团队协同 自由意味着责任 明确团队成员 产出 和 Deadline、不做任何限制【甚至可以穿着拖鞋、睡衣工作，在咖啡馆提交代码】 不强制打卡工具限制工作、或者在办公电脑上装监控软件 明确必要的红线、诚信与道德方面，明确遵守契约精神、对于违反了准则、立即执行相应惩罚 尊重成员隐私、个人偏好、投资偏好、生活习惯（他是成年人、我们也不是家长） 鼓励团队突破上下游、尽量针对性的将一件完整的事交给匹配的成员，让其发现工作中不同的事带来的价值 所有的反馈在团队层面都是善意的 团队文化 开放、务实 让工作有价值，让工作本身带来价值感 组建团队博客、开放展览团队工作效果 不要吝啬赞扬、LGTM 是一个非常好的文化 Code Smell 与 Good Code，并组织 Hackathon 或参与外部 Hackathon 对事不对人、给予容错空间与包容 其他 会议 会议, { 没人喜欢开会 } 更准确的说 &amp;ldquo;{ 没人喜欢开低效率的会议 }&amp;rdquo; 限制会议人数, 人数越少, 工作连接性更好 同一个issue、同一个工作相关的才开、无关人不需要参与 会议控制 15分钟以内，不要超过 30分钟，控制每个人的发言时间。不要把会议演变成一个讨论 会议明确组织者、会议Owner需要明确 定期会议设置成自动化，是工作中的一部分 绩效 绩效的定义的初衷应该是 团队的动态的自我纠错，借用技术术语是 动态平衡容错。 绩效是对每个人相对合理的待遇和评价 绩效表现评定 360 度、玩真的 不要制造恐惧、评级达不到要求，直接告诉具体原因，并给出建议、留出充分的时间改进 当面讨论、不要背后非议、坦诚指出问题就是给出进步的机会 上级要充分的告知组员、预期是什么、什么样为合格、做到什么是棒 共事人 在技术峰会、展开遇到的问题与讨论，展示自己另一面、兴趣爱好、投资计划、旅行见闻 不要用爱发电，只能用爱维护团队关系 选择精英、杜绝内耗和写BUG 工具 应用提升自动化工具、减少或杜绝重复性工作 信息安全罗列入团队最高等级、也是红线等级 法律 必要的法律知识、明确所有事情在法律允许范围【删库跑路、薅羊毛入刑】 非开源、信息安全、职业操守的保持 OKR 团队KR = 个人的 O OKR 的 KRs 应该是可衡量的。且 OKR 是挑战性的但不要让人绝望。 对OKR、应该抱有 50% 的信心</description></item><item><title>记一次docker日志磁盘告警问题</title><link>https://pinkhello.cc/posts/15-%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E6%97%A5%E5%BF%97%E7%A3%81%E7%9B%98%E5%91%8A%E8%AD%A6%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 10 May 2021 08:00:00 +0800</pubDate><guid>https://pinkhello.cc/posts/15-%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E6%97%A5%E5%BF%97%E7%A3%81%E7%9B%98%E5%91%8A%E8%AD%A6%E9%97%AE%E9%A2%98/</guid><description>前景 今日，我正在开开心心的刷着JFX的Coding中，突然线上报警群中爆了个炸弹，EC2磁盘超过80%。
处理过程 解决问题姿势就位：
赶紧开机 ==》 ❤️中万匹🦙奔腾而过 ❤️中MMP
默默的通过跳板机进入目标机器
不管三七二十一,执行查看磁盘占用大小，我的乖乖，占用确实超过了87%了，一下子暴涨的
# 查看磁盘占用大小 &amp;gt; sudo df -h # 查看当前目录总量 &amp;gt; sudo du -sh 开始定位具体哪个文件或者目录占用这么大,跑到根目录下。 # 查看当前目录下一级子文件和子目录占用的磁盘容量 &amp;gt; sudo du -lh --max-depth=1 一开始猜想可能是docker容器的日志占用大，上面执行后，还真 TM 是 /var/lib/docker/containers 目录占用 42G 开始查看是哪个容器占用的这么大的空间 # 查看 containers 日志目录排序 &amp;gt; sudo du -d1 -h /var/lib/docker/containers | sort -h # 查看具体的哪个日志文件大 &amp;gt; sudo find /var/lib/docker/containers -name *.log 当然这个配图是我清理之后的 定位到最大的文件，一顿操作 # 清空比较大的日志文件 &amp;gt; sudo sh -c &amp;#34;cat /dev/null &amp;gt; ${log_file}&amp;#34; 思考 上面的方式是一种方式解决【临时】 # 查看 docker 的 Logging Driver &amp;gt; docker info | grep &amp;#39;Logging Driver&amp;#39; 如何彻底解决这个问题： 写个shell脚本 使用 crontab 定期执行清理 #!</description></item><item><title>工作纪实2020</title><link>https://pinkhello.cc/posts/14-%E5%B7%A5%E4%BD%9C%E7%BA%AA%E5%AE%9E2020/</link><pubDate>Wed, 05 May 2021 08:00:00 +0800</pubDate><guid>https://pinkhello.cc/posts/14-%E5%B7%A5%E4%BD%9C%E7%BA%AA%E5%AE%9E2020/</guid><description>每日一思篇 [2019-10-12 每日一思] Mysql WAL技术 和 RingBuffer 思想好一致? [2019-10-14 每日一思] JWT 续签该如何做? [2019-10-16 每日一思] TCP/IP 协议具体指哪些? 我们都知道网络是7层模型，应表会传网数物， 现在我只讨论应传网数这4层。TCP/IP协议应该被称为TCP/IP族， 我的理解他不是属于单个的协议类型，是一个统称，知道网络模型核心设计思想是分层，为什么分层，分层从设计上和实现难度上都简单很多，哪一层需要修改只需要修改这一层。
应用层，像最常见的http、ftp、dns、rtsp、rtmp等等协议都是属于这类， 传输层呢按照传输类型又分了TCP和UDP, 网络层，是数据包交互的层面， 数据链路层是处理网卡、操作系统等等软硬抽象出的可见部分。 举一个栗子，一个http请求，在应用层面是完整的，后面被传输层（TCP层）被分包，并打上序号标记，再进入网络层（IP层）添加IP首部（目标mac地址等等）， 下面就是开始疯狂的发送了，接收方一样是这个过程的逆序。应用处理完成后面的响应过程与请求过程一样的一个过程。同时可以扩展出L4与L7的问题， 各自是如何去实现负载均衡的？L4是可以看出是基于传输层即TCP层工作（通过发布VIP（第三层）以及第四层端口），L7基于应用层工作（第四层基础上+考虑应用特征）， 比如HTTP的URL、客户端的类别、语言类型等等。
[2019-10-18 每日一思]一种场景，rabbitmq 的 Exchange 为 fanout 类型，绑定到多个queue, 什么情况会触发 rabbitmq 流控？如何解决？ [2019-10-22 每日一思]ID序列生产器怎么实现呢？ uuid生成
基于时间（60位utc时间 和 时间序列值14位，以及mac地址） 基于名称（针对命名空间dns、url等分配，把名称转成字节序列，再用md5或sha-1与命名空间标识进行计算，产生哈希结果） 基于随机数（密码学随机数，系统的硬盘内存线程堆栈进程句柄等sha-1生成哈希结果） snowflake，64bit，long型ID
ID生成方式 1bit（不使用），41bit时间戳（当前毫秒数、69年一轮回），10bit机器码（1024台，5bit数据中心，5bit机器ID），12bit作为毫秒内序列号（单机理论 409.6w/s） 雪花算法，多台机器，有因为时钟回拨导致的ID生成问题，当然可以通过发生时钟回拨后一个阈值，在阈值内则不允许产生新的ID，同步阻塞，在阈值外重新设置机器ID来解决 github.com/baidu/uid-generator 技术老铁百度开源的基于snowflake实现的ID生成器，可以借鉴研读一下 [2019-11-01 每日一思]我们常说的限流是什么？为什么要限流？限流有哪些方式？ 我们常说的限流，顾名思义即限制流量. 限制系统的输入和输出 常用的限流发展至今，有四种方式
固定时间计数器 漏桶 令牌桶 滑动窗口计数器 固定窗口计数器：以单位时间内进入系统（系统级别）或者某一个单一接口服务（系统服务级别）请求次数，在这个单位时间内的超过次数，拒绝服务或者更换其他方案（降级、熔断）达到限流目的。
可以看出，明显的缺点，从整体曲线上，毛刺现象非常严重，假设单位时间 1s 内限制 100 次，在0-10ms内我已经请求超过100次了，后面的请求全部拒绝或者做其他处理了。无法控制单位时间内的突发流量。
漏桶: 桶的容量固定，桶流出的速率恒定。桶满则限流。也是无法应对突发流量
令牌桶： 还是桶的方式， 桶中存放的是 token ，根据限流的大小， token 以恒定速率进入桶中，设置桶的最大的 token 容量，当桶满时候拒绝新添加的token ，或者直接丢弃。所有请求进入先获取令牌，得到令牌继续下面的业务逻辑，处理完成删除 token。</description></item></channel></rss>